var express = require('express');
var router = express.Router();
var User = require('./models/user_schema');
var Feedback = require('./models/feedback_schema');
var bcrypt = require('bcryptjs');
var jwt = require('./jwt')

router.post('/login', (req, res)=>{
    const {username, password} = req.body;    
    User.findOne({username: username}, (err, doc)=>{
        if (err) res.status(500).send("Login error")
        if (!doc){
            res.status(200).send({ auth: false, token: "", msg: "Invalid username" })    
        }else{
            const isValidPassword = bcrypt.compareSync(password, doc.password)
            if (isValidPassword){
                const payload = { id: doc._id, level: doc.level, username: doc.username };
                const token = jwt.sign(payload);
                res.json({ auth: true, token: token, msg: "success" });    
            }else{
                res.status(502).json({ auth: false, token: "", msg: "Invalid password" });
            }        
        }
    });    
});      

router.post('/feedback', (req, res)=>{
    Feedback.create(req.body, (err, doc)=>{
        res.json({result: doc});
    })
});


// Register
router.post('/register', function (req, res) {    
    const {password} = req.body;    
    var hashedPassword = bcrypt.hashSync(password, 8);
    req.body.password = hashedPassword;

    User.create(req.body, (err, doc)=>{
        if (err) res.status(500).send("There was a problem registering the user.")

        var payload = { id: doc._id, level: doc.level, username: doc.username };
        var token = jwt.sign(payload);
        res.status(200).json({auth: true, token: token});
    })    
});

module.exports = router;

